#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QValidator>

// Forward declaration of the UI class generated by Qt Designer
QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    void on_actionLight_Mode_triggered();
    void on_actionDark_Mode_triggered();

    // Slots for Text Conversions Tab
    void on_btnTextToHex_clicked();
    void on_btnHexToText_clicked();
    void on_btnTextToBase64_clicked();
    void on_btnBase64ToText_clicked();
    void on_btnUrlEncode_clicked();
    void on_btnUrlDecode_clicked();

    // Slot for Hashing Tab
    void on_hashInputText_textChanged();

    // Slots for Number Base Conversions Tab
    void on_decLineEdit_textChanged(const QString &text);
    void on_hexLineEdit_textChanged(const QString &text);
    void on_binLineEdit_textChanged(const QString &text);
    void on_octLineEdit_textChanged(const QString &text);

    // Slots for Unix Timestamp Tab
    void on_btnTimestampToDate_clicked();
    void on_btnDateToTimestamp_clicked();
    void on_btnNow_clicked();

    // -- NEW SLOTS for added tools --

    // JSON Formatter Tab
    void on_btnFormatJson_clicked();

    // UUID Generator Tab
    void on_btnGenerateUuid_clicked();
    void on_btnCopyUuid_clicked();

    // Lorem Ipsum Tab
    void on_btnGenerateLorem_clicked();

    // Color Converter Tab
    void on_btnPickColor_clicked();
    void on_hexColorLineEdit_textChanged(const QString &arg1);
    void on_rgbColorLineEdit_textChanged(const QString &arg1);
    void on_hslColorLineEdit_textChanged(const QString &arg1);

    // Regex Tester Tab
    void on_regexInput_textChanged(const QString &arg1);
    void on_regexTestString_textChanged();


private:
    Ui::MainWindow *ui;

    void applyStyleSheet(const QString& sheetName);

    // Helper functions to avoid infinite signal loops
    void updateNumberBases(qint64 value, QObject* sender);
    void updateColorFields(const QColor& color, QObject* sender);

    // Member variables to prevent recursive updates
    bool m_isUpdatingNumberBases = false;
    bool m_isUpdatingColors = false;

    // Validators
    QValidator *decValidator;
    QValidator *hexValidator;
    QValidator *binValidator;
    QValidator *octValidator;
    QValidator *hexColorValidator;
};

#endif // MAINWINDOW_H
